// remove italic effect for <em> ( ** in markdown ) in order to easily assign class to inline text
// use .i to reobtain italic for <em>
em:not(.i) { &[class], &[r], &[t], &[norm], &[reveal] { font-style: normal; }}

// sizes ================================

h1, h2, h3, h4, h5, h6, .fake { --s: 1 }

.big     { --s: 1.25; }
.bigger  { --s: 1.5; }
.small   { --s: .75; }
.smaller { --s: .5; }

.size, .big, .bigger, .small, .smaller { &:not(h1, h2, h3, h4, h5, h6, .fake) { font-size: calc(var(--s) * 1em); } }

h1, .fake.h1 { font-size: calc( 2em * var(--s)); }
h2, .fake.h2 { font-size: calc( 1.6em * var(--s)); }
@for $i from 3 through 6 { h#{$i}, .fake.h#{$i} { font-size: calc( 1.2em * var(--s)); } }

// alignment ================================

// inline elements are converted to block level element

.l, .c, .r {
    --ofs: 0;
    position: relative;
    display: block;
    width: 100%;
    transform: translateX(--ofs);
}

// left
.l {
    text-align: left;
    left:0
}

// center
.c {
    text-align: center;
}

// right
.r {
    text-align: right;
    right: 0;
}

// maximize width to page width for block level elements
// which contains children with alignment
p, h1, h2, h3, h4, h5, h6 { &:has(>.c), &:has(>.r) { width: 100%; } }

// lines ================================

.u, .ovl, del, .dll, .u.ovl {
    text-decoration: { color: var(--lc); thickness: var(--lt) } ;
    &.-d  { text-decoration: { style: dashed; }; }
    &.-do { text-decoration: { style: dotted; }; }
    &.-db { text-decoration: { style: double; }; }
    &.-w  { text-decoration: { style: wavy;   }; }
}

       .u       { text-decoration-line: underline; }
     .ovl       { text-decoration-line: overline; }
del, .dll       { text-decoration-line: line-through; }
   .u.ovl       { text-decoration-line: underline overline; }
del, .dll { &.u { text-decoration-line: line-through underline; }
          &.ovl { text-decoration-line: line-through overline; }
        &.u.ovl { text-decoration-line: line-through underline overline; } }

// colors ================================

$colors: white, silver, gray, black, red, maroon, yellow, olive, lime, green, aqua, teal, blue, navy, fuchsia, purple;

// use "''+$color" so that scss don't throw a warning
@each $color in $colors {
     .#{""+$color} { color: $color; }
    .h#{""+$color} { background-color: $color; }
    .b#{""+$color} { --bw: 2px; border: $color solid var(--bw); }
}

@mixin colorbg {
    position: relative;
    display: inline-block;
    --bd: .05em;
    padding: calc(var(--bd)) calc(.1em + var(--bd));
}

.h, .b { @each $color in $colors { &#{""+$color} { @include colorbg(); }}}

.h {
    @include colorbg(); 
    color: #44d;
    background: var(--color-yellow);
}

.ant {
    @include colorbg();
    &::before { --bw: 2px; border: 1px dashed #000; border-image: url(/assets/image/ants.gif) 1 repeat; }
}

// ruby (拼音) ================================

// use *character*{:r="ruby"} inside markdown
[r] {
    position: relative;
    display: inline-block;
    // width: max-content;
    text-align: center;

    &::before { content: attr(r);
    // pos
        position: relative;
        left: 50%;
        transform: translateX(-50%);
        display: block;
    // styl
        font-size: .75em;
    }
}

// del (黑幕)  ================================

.del { position: relative;

    &::after { content: "";
        position: absolute;
        inset: -2px -1px;
        background: var(--color);
        pointer-events: none;
    }

    &:hover { &::after {
        opacity: .2;
    }}
}

.blur     { filter: blur(.1em); }
.blurrier { filter: blur(.25em); }

.blur, .blurrier {
    transition: filter .2s;
    &:hover { filter: blur(0); }
}

[reveal] {
    position: relative;
    display: inline-block;
    line-height: 0;
    text-decoration: dashed underline;

    &:hover {
        visibility: hidden;

        &::after { content: attr(reveal);
            display: block;
            visibility: visible;
            font-style: italic;
        }
    }
}

// tip ================================

// use *content*{:t="tip"} inside markdown
[t] { text-decoration: dotted underline;
    &::before { content: attr(t); }
}

// reveal url for hyperlinks
.content a { &::before { content: "¥目标: {{ site.url }}"attr(href) attr(t); } } // liquid doesn't work here

.del:not([t]), .blur, .blurrier { &::before { content: "你知道的太多了。"; } }

[t], a, .del {
    position: relative;

    &::before {
        transition: .2s .4s;
        pointer-events: none;
    // pos
        position: absolute;
        left: 0 ;
        top: .5em;
        z-index: 10;
    // size
        font-size: MAX(.5em, .75rem);
        width: max-content;
        max-width: 25vw;
    // styl
        padding: .2em .5em;
        background: var(--color-page);
        opacity: 0;
    }

    &:hover::before {
        transition: 0s;
        top: 1.5em;
        opacity: 1 !important;
    }

    // tip coloring
    & { --tc: var(--color);
        &::before {
            color: var(--tc);
            border: var(--tc) solid 2px;
            box-shadow: 4px 4px var(--tc);
        }
    }
}

.footnote::before { line-height: 1em; visibility: visible !important; }

a {
    &::before {
        transition: .2s;
        position: fixed;
        bottom: 0; top: unset;
        max-width: unset;
    }

    &:hover::before {
        top: unset;
    }
}

// tip above

.above[t] {
    &::before { bottom: .5em; top: unset; }
    &:hover::before { bottom: 1.5em; }
}

// full width link
a.ab,
#markdown-toc li>a,
#f_markdown-toc li>a {
    display: block;
    right: 0;
    text-decoration: none;
    transition: 0s .2s;

    &::after { transition: opacity .0s .4s;
        inset: -.2em 0;
        box-sizing: border-box;
        border: {
            bottom: 3px solid;
            image: linear-gradient(90deg, var(--color-miku), #0000) 1;
        };
        opacity: 0;
    }

    &:hover {
        transition: 0s;
        padding-left: .5em;
        letter-spacing: .2em;

        &::after {
            transition: 0s;
            opacity: 1;
        }
    }
}

// table ================================

table {
    --tbc: var(--color); --tbtc: var(--color);
// pos
    position: relative;
    z-index: 1;
//styl
    color: var(--tbtc);
    border-collapse: collapse;
    margin-block: 1em;

    &::before, td, th { padding-block: .2em; padding-inline: .5em; }

    &[h]::before { content: attr(h);
        position: relative;
        display: table-caption;
        bottom: -1px;
    }

    // inline table
    &.i { display: inline-table; }

    // default table
    &.t {
        box-shadow: 2px 2px var(--tbc);
    // border
        thead, tbody, td:first-child, tfoot { border: 2px solid { color: var(--tbc); }; }
        td:first-child { border-block-width: 0; }
        &::before, thead, td:first-child { font-weight: bolder; text-align: center; }

        tr:nth-child(even) td:not(:first-child) {
            position: relative;
            &::before { content: "";
                position: absolute;
                inset: 0;
                z-index: -1;
                background: var(--tbc);
                opacity: .3;
            }
        }

        &::before {
            background: var(--tbc);
            color: var(--color-page);
            box-shadow: 2px 2px var(--tbc);
        }
    }

    // simple table
    &.ts {
    // border
        thead, tbody, tr :first-child, tfoot { border: 0 solid { color: var(--tbc); }; }
        thead                          { border-bottom-width: 2px; }
        tbody:not(:first-child), tfoot { border-top-width:    2px; }
        tr :first-child                { border-right-width:  2px; }

        &::before {
            padding-block: .5em;
            font-weight: bolder;
            text-align: center;
        }
    }
}

// blocks ================================

.content>blockquote, :not(blockquote) >blockquote { margin-block: 1em; }

blockquote {
    >p:first-child { margin-top: 0; } >p:last-child { margin-bottom: 0; } // revome extra margin for first and last children blockquote
    margin-right: 1em;

    // inform blocks
    &.info, &.note, &.warn {
        display: block;
        position: relative;
        width: max-content;
        max-width: 100%;
        padding-inline: 2.5em .5em;
        padding-block: .5em;
        margin-left: 0;

        &::before {
            position: absolute;
            left: 0;
            top: .37em;
            padding-inline: .5em;
            font-size: 1.2em;
        }

        >blockquote { margin-left: 0; } // remove default left margin
    }

    // information block
    &.info {
        background: var(--color-fade);
        border: var(--color) 3px solid;
        box-shadow: 4px 4px var(--color);
        color: var(--color);

        &::before { content: "ⓘ"; }
    }

    &.note {
        background: var(--color-green-fade);
        border: var(--color-green) 3px solid;
        box-shadow: 4px 4px var(--color-green);
        color: var(--color-green);

        &::before { content: "ⓘ"; }
    }

    // warning block
    &.warn {
        background: var(--color-red-fade);
        border: var(--color-red) 3px solid;
        box-shadow: 4px 4px var(--color-red);
        color: var(--color-red);

        &::before { content: "⚠";
            top: .3em;
            font-size: 1.4em;
            font-weight: normal;
            padding-inline: .4em;
        }
    }

    // cascading layer block ( unnecessarily complex )
    &.layer {
        &, blockquote:not([class]) {
            transition: border-color .4s;
            padding: .5em;
            box-shadow: -3px 0 var(--color);
            border: #0000 3px solid { left-width: 0px; };

            &:hover {
                transition: border-color 0s;
                border-color: var(--color);
            }
        }

        &, >blockquote:not([class]) {
            &:hover {
                box-shadow: -3px 0 var(--color), 3px 3px var(--color);
            }
        }

        blockquote:not([class]) { margin: 0 .3em; }
    }
}

// footnote ================================

em[norm] {
    position: relative;
    &::before { content: attr(norm); }

    sup[role="doc-noteref"] {
        top: unset;
        position: static;

        .footnote {
            position: absolute;
            inset: 0;
            color: #0000;
        }
    }
}

.footnote {
    color: var(--color-red);
}

.footnotes {
    position: relative;
    margin-top: 4em;
    padding-top: 1em;

    &::before, ol li::after { content: "";
        position: absolute;
        width: 100%; height: .25em;
    }

    &::before {
        top: 0;
        border-block: var(--color) 2px solid;
    }

    ol { margin: 0;
        li[role="doc-endnote"]:has(+li) {
            position: relative;
            margin-bottom: 2em;
            padding-bottom: 2em;

            &::after {
                width: calc(100% + 40px);
                bottom: 0; left: -40px;
                border-block: var(--color) 2px dashed;
            }
        }
    }

    p:has(.reversefootnote) {
        display: inline-block;
    }
}

// horizontal rules ================================

hr {
    border: none { block: 2px var(--color) solid };
    height: .2em;
    margin-block: 2em;

    &.break {
        height: 1px;
        opacity: 0;
        border: none !important;
    }
}


/* ================ F A N C Y ================ */

// mimic text-stroke using text-shadow ================================

$text-stroke-shadow:
    calc(-1 * var(--std))                      0  var(--stc), // l
    calc(-1 * var(--std))  calc(-1 * var(--std))  var(--stc), // lt
                       0   calc(-1 * var(--std))  var(--stc), // t
         calc(var(--std))  calc(-1 * var(--std))  var(--stc), // rt
         calc(var(--std))                      0  var(--stc), // r
         calc(var(--std))       calc(var(--std))  var(--stc), // rb
                       0        calc(var(--std))  var(--stc), // b
    calc(-1 * var(--std))       calc(var(--std))  var(--stc); // lb

// rainbow ================================

.rainbow {
    --rspd: 1s; --rbgsz: 4em;
    &, *, ::before {
        image-rendering: pixelated;
        background: url(/assets/image/rainbowDither.png), url(#{$ghprxy}/assets/image/rainbowDither.png) {size: var(--rbgsz)};
        background-clip: text;
        -webkit-background-clip: text;
        color: #0000;

        animation: rainbowScroll var(--rspd) linear infinite;
        @keyframes rainbowScroll {
            0% { background-position: 0; }
            100% { background-position: var(--rbgsz); }
        }
    }

    // rainbow but with cyam magenta yellow color scheme
    &.cmy, &.cmy * {
        background-image: url(/assets/image/rainbowDither_.png), url(#{$ghprxy}/assets/image/rainbowDither_.png) ;
    }
}

// rainbow with stroke and shadow really cool
.rainbow.fancy {
    --rs: .1em; --rsc: var(--color-sat);
    filter:
        drop-shadow(.05em -.05em var(--rsc))
        drop-shadow(-.05em .05em var(--rsc))
        drop-shadow(var(--rs) var(--rs) var(--rsc));
}

// .rainbow.fancy but with rainbowing shadows
.rainbow.fancy2 {
    --rs: .1em; --rsc: var(--color-sat);
    filter:
        drop-shadow(.05em .05em var(--color-sat))
        drop-shadow(.1em .1em var(--color-page))
        drop-shadow(.1em .1em #dd4)
        drop-shadow(.1em .1em #4dd)
        drop-shadow(.1em .1em #d4d)
        drop-shadow(.05em -.05em var(--rsc))
        drop-shadow(-.05em .05em var(--rsc))

}

// shadow

.shadow {
    --sdd: .25em; --sbr: 2px; --sdc: var(--color);
    text-shadow: var(--sdd) var(--sdd) var(--sbr) var(--sdc);
}

.projection {
    --pdd: .33em; --pdc: var(--color-plain);
    text-shadow: 1px 1px var(--color-page), var(--pdd) var(--pdd) var(--pdc);
    padding-bottom: .2em;
}

// echo ================================

$echo:
    calc(.1em * var(--h)) calc(.1em * var(--v)) #44d8,
    calc(.2em * var(--h)) calc(.2em * var(--v)) #44d4,
    calc(.3em * var(--h)) calc(.3em * var(--v)) #44d2;

$echorb:
    calc(.05em * var(--h)) calc(.05em * var(--v)) #d44,
    calc(.1em  * var(--h)) calc(.1em  * var(--v)) #dd4,
    calc(.15em * var(--h)) calc(.15em * var(--v)) #4dd,
    calc(.2em  * var(--h)) calc(.2em  * var(--v)) #d4d;

$echo_type:
    ($echo),
    ($echorb),
    (($text-stroke-shadow), ($echo)),
    (($text-stroke-shadow), ($echorb));

@mixin echo($h, $v, $e) {
    --h: #{$h}; --v: #{$v};
    text-shadow: nth($echo_type, $e);
    padding: calc(.8em * max(0,-$v)),
             calc(.8em * max(0, $h)),
             calc(.8em * max(0, $v)),
             calc(.8em * max(0,-$h));
}

$echo_list: ".echo", ".echorb", ".stroke.echo", ".stroke.echorb";

@for $i from 1 through length($echo_list) { #{nth($echo_list, $i)}
                { @include echo( 1, 1, $i );
    &-down      { @include echo( 0, 1, $i ); }
    &-down-left { @include echo(-1, 1, $i ); }
    &-left      { @include echo(-1, 0, $i ); }
    &-up-left   { @include echo(-1,-1, $i ); }
    &-up        { @include echo( 0,-1, $i ); }
    &-up-right  { @include echo( 1,-1, $i ); }
    &-right     { @include echo( 1, 0, $i ); }
};}

// stroke ================================

.stroke {
    --std: 1px; --stc: var(--color);
    color: var(--color-page);
    text-shadow: $text-stroke-shadow;

    &.shadow { text-shadow: $text-stroke-shadow, var(--sdd) var(--sdd) var(--sdc); }
}

// mirror ================================

.mirror { transform: scaleX(-1); }

.upsdown { transform: scaleY(-1); }

.mirror, .upsdown { display: inline-block; }

// animate ================================

// blink

.blink {
    --bt: 2s;
    animation: blink var(--bt) steps(1, end) infinite forwards;
}

.fadeinout {
    --ft: 2s;
    animation: blink var(--ft) linear infinite;
}

@keyframes blink { 50% { opacity: 0; } }

// rumble shudder

.rumble {
    --rt: .05s;
    animation: rumble var(--rt) linear infinite alternate;
}

.shudder {
    --st: .05s;
    animation: shudder var(--st) linear infinite alternate;
}

.rumble, .shudder { display: inline-block; }

@keyframes rumble { 100% { transform: translateY(-.2em) } }
@keyframes shudder { 100% { transform: translateX(.2em) } }

// sparkle  

.sparkle:not(.rainbow) { background: url(/assets/image/sparkle.gif) repeat { size: 10em }; }
.sparkle.rainbow { position: relative;

    &::before { content: "";
        position: absolute;
        inset: 0;
        background: url(/assets/image/sparkle.gif) repeat { size: 10em }; 
    }
}

// rotate

.rotate {
    --rspd: 4s; --ofst-x: 0%; --ofst-y: 0%; --rphs: 0; --rheit: 2em;
// pos
    display: inline-block;
    transform-origin:
        calc( 50% + var(--ofst-x))
        calc( 50% + var(--ofst-y));
// size
    width: max-content;
// styl
    margin-block: calc(var(--rheit)/2);
    padding: 0;
// ani
    animation: rotate var(--rspd) linear calc(var(--rspd) * var(--rphs) * -1) infinite;

    &.rev { animation-direction: reverse; }

    &.c {
        transform: translateY(50%);
        animation-name: rotateCentered;
        left: 50%; transform: translateX(-50%);
    }

    @keyframes rotate {
        0%   { transform: rotate(0); }
        100% { transform: rotate(360deg); }
    }

    @keyframes rotateCentered {
        0%   { transform: translateX(-50%) rotate(0); }
        100% { transform: translateX(-50%) rotate(360deg); }
    }
}

// pulse

.pulse {
    --pspd: .25s; --pscl: 1.2; --pphs: 0; --s: 1;

    // .rotate & { --pscl: 1.5 }

    display: inline-block;

    // sizing
    font-size: calc(var(--pscl) * 1em);
    animation: pulse var(--pspd) ease-out calc(var(--pspd) * var(--pphs) * -1) infinite alternate;
    @keyframes pulse {
        0% { scale: calc(1 / var(--pscl)); }
        100%   { scale: 1; }
    }
}